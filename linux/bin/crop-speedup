#!/usr/bin/env bash

print_help () {
  echo '  USAGE:
    crop-speedup -i <input-video> [...options] <output-video>
  OPTIONS:
    --help, -h      | show this help message
    --verbose, -v   | see outputs of ffmpeg while processing
    --input, -i     | input video, should have the same extension as <output>
    --start, -s     | start point, e.g. 00:12:30, (leave empty if you want speedup only)
    --duration, -d  | duration, length, of the cropped part, (ignored if --start not found)
    --speed         | speed of the output video (multiplier, e.g., 1.75)'
}

while (($#)); do
  arg=$1; shift
  [ "$arg" = "--input" ]    && input="$1"        && shift && continue
  [ "$arg" = "-i" ]         && input="$1"        && shift && continue
  [ "$arg" = "--start" ]    && start_point="$1"  && shift && continue
  [ "$arg" = "-s" ]         && start_point="$1"  && shift && continue
  [ "$arg" = "--duration" ] && duration="$1"     && shift && continue
  [ "$arg" = "-d" ]         && duration="$1"     && shift && continue
  [ "$arg" = "--speed" ]    && speed="$1"        && shift && continue
  [ "$arg" = "-v" ]         && is_verbose=1      && continue
  [ "$arg" = "--verbose" ]  && is_verbose=1      && continue
  [ "$arg" = "-h" ]         && is_help=1         && break
  [ "$arg" = "--help" ]     && is_help=1         && break
  output="$arg"
  (($#)) && >&2 echo error: invalid number of arguments && exit 2
done

((is_help)) && print_help && exit 0
[ ! "$input" ] && echo error: input file is required && exit 2
[ ! "$output" ] && echo error: output file is required && exit 2

[ ! "$duration" ] && [ "$start_point" ] && \
  >&2 echo error: duration must be specified if start is passed && exit 2

[ "$input" = "$output" ] && \
  >&2 echo error: input should differ from output && exit 2

ext() {
  basename=$(basename "$1")
  echo "${basename##*.}"
}

input_ext=`ext "$input"`
output_ext=`ext "$output"`
tmp_file="/tmp/asd_$RANDOM.$input_ext"

# [ ! "$input_ext" = "$output_ext" ] && \
#   >&2 echo error: input\'s ext doesn\'t match output\'s ext && exit 2

crop() {
  echo
  echo ✂️  ... cut part of the video from $start_point with length $duration
  echo --------------------------------------------------------------
  command="ffmpeg -i \"$1\" -ss $2 -t $3 -c:a copy \"$4\""
  echo $command
  read -p "continue ? (Y/n): " ans
  ans="$(echo $ans | tr '[:upper:]' '[:lower:]')"
  [ ! "$ans" = "n" ] && cmd="$command"
}

speedup() {
  echo
  echo ⏩️ ... speedup the cut video x$speed
  echo --------------------------------------------------------------
  command="ffmpeg -i \"$1\" -filter:v \"setpts=PTS/$2\" -filter:a \"atempo=$2\" \"$3\""
  echo $command
  read -p "continue ? (Y/n): " ans
  ans="$(echo $ans | tr '[:upper:]' '[:lower:]')"
  [ ! "$ans" = "n" ] && cmd="$command"
}

run() { 
  while (($#)); do
    [ $is_verbose ] && eval $1 || eval $1 &> /dev/null
    exit_code=$?
    (($exit_code)) &&
    echo && echo -e ❌️ This command failed with code: $exit_code &&
    echo -------------------------------------------------------------- && \
    echo $1 && end $exit_code
    shift
  done
}

end() {
  # remove the temp file
  exit_code="$([ $1 ] && echo $1 || echo 0)"
  [ -f "$tmp_file" ] && rm -f "$tmp_file"
  exit $exit_code
}

if [ "$start_point" ] && [ "$speed" ]; then
  crop "$input" "$start_point" "$duration" "$tmp_file"; cmd1="$cmd"
  speedup "$tmp_file" "$speed" "$output"; cmd2="$cmd"
  run "$cmd1" "$cmd2"
elif [ "$start_point" ]; then
  crop "$input" "$start_point" "$duration" "$tmp_file"
  run "$cmd"
elif [ "$speed" ]; then
  speedup "$tem_file" "$speed" "$output"
  run "$cmd"
fi

end 0

