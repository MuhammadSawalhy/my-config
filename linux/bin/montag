#!/usr/bin/env bash
# TODO: collect all options to one ffmpeg command, not more temp files
# TODO: use `ffmpeg -loglevel error` for quiet mode

set -e

print-help () {
    cat <<- EOF
┌──┬─────────────┬───────────────────────────────────────────────────┄┄┄┄┄┄┄┄┄
│-h│ --help      │ Show this help message
│-q│ --quiet     │ See outputs of ffmpeg while processing
│-i│ --input     │ Input video, should have the same extension as [output-video]
│-s│ --start     │ Specifies the start point, e.g. 00:01:23.000 or 83 (in seconds)
│-d│ --duration  │ Duration, length, the same format as start (needs --start)
│-t│ --to        │ End point, the same format as start (needs --start)
│-x│ --speed     │ Speed of the output video (multiplier, e.g., 1.75)
│  │ --yes       │ Work on the video immediately without the user's consent
│  │ --mute      │ Mute audio
│  │ --crop      │ Frame to crop the video, e.g. "in_w:in_h-40", see crop
│  │             │   filter of ffmpeg: http://ffmpeg.org/ffmpeg-filters.html#crop
│  │ --thumb     │ Get a thumbnail of the video or set it by providing a URI for it
├──┼─────────────┼───────────────────────────────────────────────────┄┄┄┄┄┄┄┄┄
│  │ --text      │ Speech to text (convert the audio to text, Whisper will be used)
│  │             │ Default whisper args: --language auto --verbose False --model medium
├──┼─────────────┼───────────────────────────────────────────────────┄┄┄┄┄┄┄┄┄
│  │ --gif       │ Convert to gif, this will set these --fps to 10
│  │ --gif-loop  │ How many loops your gif will do (default false)
│  │ --gif-delay │ How long to delay the gif (default 10)
├──┼─────────────┼───────────────────────────────────────────────────┄┄┄┄┄┄┄┄┄
│  │ --width     │ Width of the output (aspect ratio is preserved)
│  │ --fps       │ Frames persecond
├──┼─────────────┼───────────────────────────────────────────────────┄┄┄┄┄┄┄┄┄
│  │ --ytdl      │ yt-dlp additional args
│  │ --ydi       │ yt-dlp interactive mode, requires whiptail
└──┴─────────────┴───────────────────────────────────────────────────┄┄┄┄┄┄┄┄┄

USAGE:
  montag -i <input-video> [options...] [-i <input-video> [options...]...] [output-video]

EXAMPLES:
  # get the first 10 seconds and speed up the video two times
  montag -i my-input-video.mp4 --duration 10 --speed 2

  # get the specified range of the video from "--start" to "--to" and speed up
  montag -i my-input-video.mp4 --start 00:10:21 --t 00:11:30 --speed 2
  montag -i my-input-video.mp4 -s 00:10:21 -t 00:11:30 -x 2 --ytdl "-u username -p password"

  # get a transcription of a part of a video
  montag -i <uri> -s 00:10:11 -d 30 --text --whisper "--language auto" | xsel -ib
EOF
}

collect-arg-and-validate() {
    while (($#)); do
        arg=$1; shift
        case "$arg" in
            -q|--quiet) is_quiet=1 ;;
            -h|--help) is_help=1 ;;
            --yes) is_yes=1 ;;
            --mute) mute_audio=1 ;;
            --ydi) is_ydi=1 ;;
            --ytdl) ytdl_options=($1) && shift ;; # TODO: how to parse arguments with spaces
            --input|-i) input="$1"; shift ;;
            --start|-s) start_point="$1"; shift ;;
            --duration|-d) duration="$1"; shift ;;
            --to|-t) end_point="$1"; shift ;;
            --speed|-x) speed="$1"; shift ;;
            --crop) crop="$1"; shift ;;
            --width) width="$1"; shift ;;
            --fps) fps="$1"; shift ;;
            --thumb)
                is_thumb=1
                [ $# = 0 ] || [[ "$1" = -* ]] && continue;
                thumb="$1"; shift ;;
            --gif) is_gif=1 ;;
            --gif-loop) gif_loop="$1"; shift ;;
            --gif-delay) gif_delay="$1"; shift ;;

            --text) is_text=1 ;;

            *)
                if [[ "$arg" = -* ]] || (($#))
                then
                    echo-debug error: invalid arguments
                    exit 2
                fi
                output="$arg"
                ;;
        esac
    done

    ((is_help)) && print-help && exit 0

    # ----- cutting -----

    if [ "$end_point" ] && [ "$duration" ]; then
        echo-debug error\(cutting\): both end point and duration are provided
        exit 2
    fi

    if [ "$end_point" ] || [ "$duration" ]; then
        start_point=$([ "$start_point" ] && echo "$start_point" || echo "00:00:00")
    fi

    # ----- giffing -----

    if [ "$loop" ] && [ ! "$is_gif" ]; then
        echo-debug error\(giffing\): can\'t use --loop without --gif
        exit 2
    fi

    # ---- text ----
    if [ "$is_text" ] && [ ! -d ~/bin/montag2 ]; then
        echo-debug error\(text\): can\'t find the whisper model in ~/bin/montag2
        >&2 echo 'mkdir -p ~/bin/montag2 && cd ~/bin/montag2'
        >&2 echo 'python3 -m venv env'
        >&2 echo 'source env/bin/activate'
        >&2 echo 'pip install git+https://github.com/openai/whisper.git'
        exit 2
    fi

    # ----- IO -----

    prepare-input-and-output
}

echo-debug() {
    [ "$is_quiet" ] || >&2 echo "=>" "$@"
}

echo-info() {
    >&2 echo "->" "$@"
}

print-cmd() {
    for arg in "$@"; do
        # add quotes if arg conatians a space
        [[ "$arg" =~ " " ]] && arg="\"$arg\""
        echo -n "$arg "
    done
    echo
}

get-file-name-from-url() {
    [ ! "$thumb" ] && [ "$is_thumb" ] && return 0
    local output
    echo-debug Getting the file name from a url
    temp_cmd=(yt-dlp "${ytdl_options[@]}" --no-playlist -O '%(title)s.%(ext)s' "$1")
    echo-debug "$(print-cmd "${temp_cmd[@]}")"
    output="$("${temp_cmd[@]}")"
    output="${output/\//\\\\}" # replace / with \\ .
    echo "$output"
}

temp_files=()

get-temp-file() {
    mkdir -p /tmp/montag
    file=/tmp/montag/"$RANDOM.$1"
    temp_files+=("$file")
    echo "$file"
}

prepare-input-and-output() {
    [ ! "$input" ] && echo-debug error\(IO\): input file is required && exit 2

    if
    echo "$input" |
    grep -oP '^https?://' > /dev/null
    then
        if [ "$is_ydi" ]; then
            echo-debug "$(print-cmd ydi -p "$input")"
            read -ra quality_settings < <(ydi -p "$input")
            ytdl_options+=("${quality_settings[@]}")
        fi

        if [ ${#ytdl_options[@]} = 0 ]; then
            if [ "$is_text" ]; then
                ytdl_options+=(-f 'bestaudio[abr<=128k]' --extract-audio --audio-format mp3 --audio-quality 5)
            else
                ytdl_options+=(-f "best[height<=720]")
            fi
        fi

        if [ ! "$output" ]; then
            output=$(get-file-name-from-url "$input")
        fi
    elif [ ! "$output" ]; then
        # then same extension as the input
        output="$(echo "$input" | sed -e 's/^\(.*\)\.\(.*\)$/\1-montaged.\2/')"
    fi

    if [ "$is_gif" ]; then
        # use the same name with .gif as extension
        output="${output%.*}.gif"
    fi
}

get-input-args() {
    set -e # we have to do this again because this function is called as a command substitution
    local argv=("$@")
    local input="${argv[-1]}"
    unset 'argv[-1]'

    if [[ "$input" =~ ^https?:// ]] && { [[ "$is_thumb" && "$thumb" ]] || [ ! "$is_thumb" ]; }; then
        # see: https://unix.stackexchange.com/questions/230481/how-to-download-portion-of-video-with-youtube-dl-command

        temp_cmd=(yt-dlp --no-playlist --youtube-skip-dash-manifest -g "${ytdl_options[@]}" "$input")
        echo-debug "$(print-cmd "${temp_cmd[@]}")"
        readarray -t links <<< "$("${temp_cmd[@]}")"

        # put link inside 'single qutaion mark'
        if [ ${#links[@]} = 1 ]; then
            if [ "$thumb" ]
            then cmd+=("${argv[@]}" -i "${links[0]}" -i "$thumb" -map 0 -map 1 -c copy -disposition:v:1 attached_pic)
            else cmd+=("${argv[@]}" -i "${links[0]}")
            fi
        elif [ ${#links[@]} = 2 ]; then
            if [ "$thumb" ]
            then cmd+=("${argv[@]}" -i "${links[0]}" "${argv[@]}" -i "${links[1]}" -i "$thumb" -map 0:v -map 1:a -map 2 -c:v copy -c:a copy -disposition:v:2 attached_pic)
            else cmd+=("${argv[@]}" -i "${links[0]}" "${argv[@]}" -i "${links[1]}" -map 0:v -map 1:a)
            fi
        else
            echo-debug 'error: invalid output from "yt-dlp -g <url>"'
            [ ! "$is_quiet" ] &&
            >&2 printf '==============\n%s\n' "${links[@]}"
            exit 1
        fi

        return 0
    fi

    cmd+=("$@")
}

get-user-acceptance() {
    [ "$is_yes" ] && return
    echo-info
    echo-info "👇 This is the final command"
    echo-info

    if [[ ${#convert_cmd[@]} -gt 1 ]]; then
        echo-info "$(print-cmd "${cmd[@]::${#cmd[@]}-1}" "|" "${convert_cmd[@]}" "$output")"
    elif [[ ${#whisper_cmd[@]} -gt 1 ]]; then
        echo-info "$(print-cmd "${cmd[@]}")"
        echo-info
        echo-info "$(print-cmd "${whisper_cmd[@]}")"
    else
        echo-info "$(print-cmd "${cmd[@]}")"
    fi

    echo-info

    read -r -p "continue ? ([Y]/n): " ans
    ans="$(echo "$ans" | tr '[:upper:]' '[:lower:]')"
    [ "$ans" = "y" ] || [ -z "$ans" ] || clear-and-exit 1
}

clear-and-exit() {
    # remove the temp file
    for file in "${temp_files[@]}"; do rm -rf "$file"; done
    exit_code="${1:-0}"
    exit "$exit_code"
}

build-ffmpeg-command() {
    cmd=(ffmpeg)
    convert_cmd=(convert)
    whisper_cmd=(whisper)

    # Quiet logs
    [ "$is_quiet" ] && cmd+=(-loglevel error)

    # Cut (Slice)
    if [ "$start_point" ]; then
        extra_description=$([ "$duration"  ] && echo "with length $duration" || echo "to $end_point")
        echo-debug "✂️  ... cut part of the video from $start_point $extra_description"

        cut_args=(-ss "$start_point")
        [ "$duration"  ] && cut_args+=(-t "$duration")
        [ "$end_point" ] && cut_args+=(-to "$end_point")

        get-input-args "${cut_args[@]}" "$input"
    else
        get-input-args "$input"
    fi

    # Speed
    if [ "$speed" ]; then
        echo-debug "⏩️  ... speedup the cut video x$speed"
        cmd+=(-filter:v "setpts=PTS/$speed" -filter:a "atempo=$speed")
    fi

    # Crop
    if [ "$crop" ]; then
        echo-debug "🖼️  ... crop the video with $crop"
        cmd+=(-vf "crop=$crop")
    fi

    # Mute audio
    if [ "$mute_audio" ]; then
        echo-debug "🔇 ... mute the audio"
        cmd+=(-an)
    fi

    exclusive=0

    if [ "$is_thumb" ]; then
        if [ -n "$thumb" ]
        then
            echo-debug "🖼️  ... use '$thumb' as thumbnail"
        else
            [ "$exclusive" = 1 ] && echo-debug "error: you using two options together like --gif --thumb" && exit 1
            exclusive=1
            echo-debug "🖼️  ... generate thumbnail"
            cmd=(yt-dlp --skip-download --write-thumbnail --convert-thumbnails jpg "${ytdl_options[@]}" "$input")
        fi
    fi

    # GIF conversion
    if [ "$is_gif" ]; then
        [ "$exclusive" = 1 ] && echo-debug "error: you using two options together like --gif --thumb" && exit 1
        exclusive=1
        echo-debug 📽️ ... generating a gif
        fps=$((fps || 10))
        lloop=$((gif_loop || 0))
        ldelay=$((gif_delay || 10))
        cmd+=(-vf "fps=${fps}${width:+,scale=$width:-1:flags=lanczos}" -c:v pam -f image2pipe -)
        convert_cmd+=(-delay "$ldelay" - -loop "$lloop" -layers optimize)
    fi

    if [ "$is_text" ]; then
        [ "$exclusive" = 1 ] && echo-debug "error: you using two options together like --gif --thumb" && exit 1
        exclusive=1
        echo-debug "🗣️  ... convert the video to text"
        output="$(get-temp-file "$(basename "$output")")"
        whisper_cmd+=("$output" --verbose False --model medium --output_format txt --output_dir /tmp/montag)
    fi

    [ "${cmd[0]}" = ffmpeg ] && cmd+=("$output")

    get-user-acceptance

    # we have 4 different modes
    # - modifiying a video by using a file or a remote URL
    # - generating a gif file
    # - generating a thumbnail
    # - generating a text from the audio (speech to text)

    if [[ ${#convert_cmd[@]} -gt 1 ]]; then
        "${cmd[@]::${#cmd[@]}-1}" | "${convert_cmd[@]}" "$output"
    elif [[ ${#whisper_cmd[@]} -gt 1 ]]; then
        "${cmd[@]}"
        dir="$PWD"
        cd ~/bin/montag2
        source env/bin/activate

        if ! which whisper > /dev/null; then
            echo-debug "error: you should install whisper first"
            clear-and-exit 1
        fi

        "${whisper_cmd[@]}"
        cat "${output%.*}.txt"

        cd "$dir"
    else
        "${cmd[@]}"
    fi
}

collect-arg-and-validate "$@"
build-ffmpeg-command
clear-and-exit 0
