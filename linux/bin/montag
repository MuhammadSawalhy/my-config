#!/usr/bin/env bash
# TODO: collect all options to one ffmpeg command, not more temp files
# TODO: use `ffmpeg -loglevel error` for quiet mode

set -e

print-help () {
cat <<- EOF
‚îå‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ
‚îÇ-h‚îÇ --help      ‚îÇ Show this help message
‚îÇ-q‚îÇ --quiet     ‚îÇ See outputs of ffmpeg while processing
‚îÇ-i‚îÇ --input     ‚îÇ Input video, should have the same extension as [output-video]
‚îÇ-s‚îÇ --start     ‚îÇ Specifies the start point, e.g. 00:01:23.000 or 83 (in seconds)
‚îÇ-d‚îÇ --duration  ‚îÇ Duration, length, the same format as start (needs --start)
‚îÇ-t‚îÇ --to        ‚îÇ End point, the same format as start (needs --start)
‚îÇ-x‚îÇ --speed     ‚îÇ Speed of the output video (multiplier, e.g., 1.75)
‚îÇ  ‚îÇ --yes       ‚îÇ Work on the video immediately without the user's consent
‚îÇ  ‚îÇ --mute      ‚îÇ Mute audio
‚îÇ  ‚îÇ --crop      ‚îÇ Frame to crop the video, e.g. "in_w:in_h-40", see crop
‚îÇ  ‚îÇ             ‚îÇ   filter of ffmpeg: http://ffmpeg.org/ffmpeg-filters.html#crop
‚îú‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ
‚îÇ  ‚îÇ --gif       ‚îÇ Convert to gif, this will set these defaults: --fps 10
‚îÇ  ‚îÇ --gif-loop  ‚îÇ How many loops your gif will do
‚îÇ  ‚îÇ --gif-delay ‚îÇ How long to delay the gif
‚îú‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ
‚îÇ  ‚îÇ --width     ‚îÇ Width of the output (aspect ratio is preserved)
‚îÇ  ‚îÇ --fps       ‚îÇ Frames persecond
‚îú‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ
‚îÇ  ‚îÇ --ytdl      ‚îÇ yt-dlp additional args
‚îÇ  ‚îÇ --ydi       ‚îÇ yt-dlp interactive mode, requires whiptail
‚îî‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ

USAGE:
  montag -i <input-video> [options...] [-i <input-video> [options...]...] [output-video]

EXAMPLES:
  # get the first 10 seconds and speed up the video two times
  montag -i my-input-video.mp4 --duration 10 --speed 2

  # get the specified range of the video from "--start" to "--to" and speed up
  montag -i my-input-video.mp4 --start 00:10:21 --t 00:11:30 --speed 2
  montag -i my-input-video.mp4 -s 00:10:21 -t 00:11:30 -x 2 --ytdl "-u username -p password"
EOF
}

collect-arg-and-validate() {
  while (($#)); do
    arg=$1; shift

    [ "$arg" = "--quiet"     ] && is_quiet=1       && continue
    [ "$arg" = "-q"          ] && is_quiet=1       && continue
    [ "$arg" = "--help"      ] && is_help=1        && break
    [ "$arg" = "-h"          ] && is_help=1        && break
    [ "$arg" = "--gif"       ] && is_gif=1         && continue
    [ "$arg" = "--yes"       ] && is_yes=1  && continue
    [ "$arg" = "--gif-loop"  ] && gif_loop="$1"    && shift && continue
    [ "$arg" = "--gif-delay" ] && gif_delay="$1"   && shift && continue

    [ "$arg" = "--input"     ] && input="$1"       && shift && continue
    [ "$arg" = "-i"          ] && input="$1"       && shift && continue
    [ "$arg" = "--start"     ] && start_point="$1" && shift && continue
    [ "$arg" = "-s"          ] && start_point="$1" && shift && continue
    [ "$arg" = "--duration"  ] && duration="$1"    && shift && continue
    [ "$arg" = "-d"          ] && duration="$1"    && shift && continue
    [ "$arg" = "--to"        ] && end_point="$1"   && shift && continue
    [ "$arg" = "-t"          ] && end_point="$1"   && shift && continue
    [ "$arg" = "--speed"     ] && speed="$1"       && shift && continue
    [ "$arg" = "-x"          ] && speed="$1"       && shift && continue
    [ "$arg" = "--crop"      ] && crop="$1"        && shift && continue
    [ "$arg" = "--width"     ] && width="$1"       && shift && continue
    [ "$arg" = "--fps"       ] && fps="$1"         && shift && continue

    [ "$arg" = "--ytdl"      ] && ytdl_options=($1)   && shift && continue
    [ "$arg" = "--ydi"       ] && is_ydi=1            && continue

    output="$arg"
    (($#)) && >&2 echo error: invalid number of arguments && exit 2
  done

  ((is_help)) && print-help && exit 0

  # ----- IO -----

  prepare-input-and-output

  # ----- cutting -----

  if [ "$end_point" ] && [ "$duration" ]; then
    >&2 echo error\(cutting\): both end point and duration are provided
    exit 2
  fi

  if
    [ -n "$duration" ] ||
    [ -n "$end_point" ] && [ -z "$start_point" ]
  then
    start_point=0
  fi

  # ----- giffing -----

  if [ "$loop" ] && [ ! "$is_gif" ]; then
    >&2 echo error\(giffing\): can\'t use --loop without --gif
    exit 2
  fi
}

echo-debug() {
  [ "$is_quiet" ] || >&2 echo "=>" "$@"
}

prepare-input-and-output() {
  [ ! "$input" ] && echo error\(IO\): input file is required && exit 2

  mkdir -p /tmp/montag

  ext() {
    basename=$(basename "$1")
    echo "${basename##*.}"
  }

  if
    echo "$input" |
    grep -oP '^https?://' > /dev/null &&
    [ ! "$output" ]
  then
    quality_settings="-f best[height<=720]"
    if [ "$is_ydi" ]; then
      echo-debug ydi -p \""$input"\"
      quality_settings="-f $(ydi -p "$input")"
    fi
    ytdl_options+=($quality_settings)
    echo-debug yt-dlp \""${ytdl_options[*]}"\" --no-playlist -O \''%(title)s.%(ext)s'\' \""$input"\"
    output="$(yt-dlp "${ytdl_options[@]}" --no-playlist -O '%(title)s.%(ext)s' "$input")"
    output="${output/\//\\\\}" # replace / with \\
    output_ext=$(ext "$output")
    tmpfile_1="/tmp/montag/$RANDOM.$output_ext"
    tmpfile_2="/tmp/montag/$RANDOM.$output_ext"
    if [ "$is_gif" ]; then
      # use the same name with .gif as extension
      output="${output%.*}.gif"
    fi
  else
    if [ ! "$output" ] && [ "$is_gif" ]; then
      # use the same name with .gif as extension
      output="${input%.*}.gif"
    elif [ ! "$output" ]; then
      # then same extension as the input
      output="$(echo "$input" | sed -e 's/^\(.*\)\.\(.*\)$/\1-montaged.\2/')"
    elif [ "$input" = "$output" ]; then
      >&2 echo error\(IO\): input should differ from output
      exit 2
    fi
    input_ext=$(ext "$input")
    tmpfile_1="/tmp/montag/$RANDOM.$input_ext"
    tmpfile_2="/tmp/montag/$RANDOM.$input_ext"
  fi
}

get-input-args() {
  set -e # we have to do this again because this function is called as a command substitution
  local argv=("$@")
  local input="${argv[-1]}"
  unset 'argv[-1]'

  if echo "$input" | grep -oP '^https?://' > /dev/null; then
    # https://unix.stackexchange.com/questions/230481/how-to-download-portion-of-video-with-youtube-dl-command

    [ $is_quiet ] || >&2 echo "=>" yt-dlp --no-playlist --youtube-skip-dash-manifest -g \""${ytdl_options[*]}"\"
    read -r -a links <<< "$(yt-dlp --no-playlist --youtube-skip-dash-manifest -g "${ytdl_options[@]}" "$input")"

    # put link inside 'single qutaion mark'
    if [ ${#links[@]} = 1 ]; then
      echo -n "${argv[*]} -i '${links[0]}' "
    elif [ ${#links[@]} = 2 ]; then
      echo -n "${argv[*]} -i '${links[0]}' "
      echo -n "${argv[*]} -i '${links[1]}' "
      echo -map 0:v -map 1:a
    else
      1>&2 echo 'ERROR: invalid output from "yt-dlp -g <url>"'
      [ ! $is_quiet ] &&
        1>&2 printf '==============\n%s\n' "${links[@]}"
      exit 1
    fi

    return 0
  fi

  echo "-i '$input'"
}

do-cut() {
  [ "$duration"  ] && end_point_arg="-t '$duration'"
  [ "$end_point" ] && end_point_arg="-to '$end_point'"
  input_args="$(get-input-args -ss "$start_point" "$1")"

  if [ "$duration"  ]
  then extra_description="with length $duration"
  elif [ "$end_point" ]
  then extra_description="to $end_point"
  fi
  cmd="ffmpeg $input_args -ss '$start_point' $end_point_arg -copyts '$2'"
  echo-title "‚úÇÔ∏è  ... cut part of the video from $start_point $extra_description"
}

do-speedup() {
  input_args="$(get-input-args "$1")"
  cmd="ffmpeg $input_args -filter:v 'setpts=PTS/$speed' -filter:a 'atempo=$speed' '$2'"
  echo-title "‚è©Ô∏è ... speedup the cut video x$speed"
}

do-crop() {
  # source: https://video.stackexchange.com/questions/4563/how-can-i-crop-a-video-with-ffmpeg
  input_args="$(get-input-args "$1")"
  cmd="ffmpeg $input_args -filter:v 'crop=$crop' '$2'"
  echo-title "üî≥ ... crop the video with: $crop"
}

do-convert-gif() {
  local lfps=10 lloop=0 ldelay=10
  [ -n "$fps"       ] && lfps=$fps
  [ -n "$gif_loop"  ] && lloop=$gif_loop
  [ -n "$gif_delay" ] && ldelay=$gif_delay
  if [ "$width" ]; then local scale_filter=",scale=$width:-1:flags=lanczos"; fi
  input_args="$(get-input-args "$1")"
  # convert comes from `extra/imagemagick` Arch package
  cmd="ffmpeg $input_args -vf 'fps=$lfps$scale_filter' -c:v pam -f image2pipe - |
    convert -delay $ldelay - -loop $lloop -layers optimize '$2'"
  echo-title "üèÉ ... generating a gif"
}

echo-title() {
  local title="$1"
  local title_len="${#title}"
  local num_of_dashes=$title_len
  [ "$num_of_dashes" -lt 50 ] &&
    num_of_dashes=50
  [ "$num_of_dashes" -gt "$(tput cols)" ] &&
    num_of_dashes="$(tput cols)"
  local dashes="$(for i in $(seq 1 "$num_of_dashes");do printf "-";done)"
  echo "$dashes"
  echo-in-the-center "$title" "$num_of_dashes"
  echo "$dashes"
}

echo-in-the-center() {
  local line="$1"
  local term_w="${2:-$(tput cols)}"
  local padding=$(( (term_w - ${#line}) / 2)) # always integer
  if [ $padding -gt 0 ]; then
    printf "%${padding}s" # padding with spaces
  fi
  echo "$line"
}

get-user-acceptance() {
  [ $is_yes ] && return
  read -r -p "continue ? ([Y]/n): " ans
  ans="$(echo "$ans" | tr '[:upper:]' '[:lower:]')"
  [ ! "$ans" = "n" ] || clear-and-exit 1
}

run-commands() {
  while (($#)); do
    if [ ! $is_quiet ]; then
      eval "$1" 
    else 
      eval "$1" &> /dev/null 
    fi
    exit_code=$?
    if ((exit_code)); then # if it is other than 0
      echo-title "‚ùåÔ∏è This command failed with code: $exit_code"
      echo "$1"; clear-and-exit $exit_code
    fi
    shift
  done
}

clear-and-exit() {
  # remove the temp file
  exit_code="${1:-0}"
  [ -f "$tmpfile_1" ] && rm -f "$tmpfile_1"
  [ -f "$tmpfile_2" ] && rm -f "$tmpfile_2"
  exit "$exit_code"
}

do-processing() {
  declare -a tasks
  declare -a cmds
  [ "$start_point" ] && tasks+=("do-cut")
  [ "$speed"       ] && tasks+=("do-speedup")
  [ "$crop"        ] && tasks+=("do-crop")
  [ "$is_gif"      ] && tasks+=("do-convert-gif")

  # if empty -> throw error
  (( ${#tasks} )) ||
  { >&2 echo error: no commands provided; clear-and-exit 1; }

  current_input="$input"
  current_output="$tmpfile_1"

  # intermidiate tasks, swap between the 2 tmp files
  collect-intermediate-cmds() {
    for (( i = 0; i < ${#tasks[@]} - 1; i++ )); do
      [ -f "$current_output" ] && rm -f "$current_output"
      current_task=${tasks[$i]}
      $current_task "$current_input" "$current_output"
      cmds+=("$cmd")
      echo "$cmd"
      echo

      # swap and prepare for the next iteration
      if [ "$current_input" = "$tmpfile_1" ]; then
        current_input="$tmpfile_2"
        current_output="$tmpfile_1"
      else
        current_input="$tmpfile_1"
        current_output="$tmpfile_2"
      fi
    done
  }

  collect-intermediate-cmds
  # finally, do the last task with the final destination "$output"
  last_task="${tasks[-1]}"
  $last_task "$current_input" "$output"
  cmds+=("$cmd")
  echo "$cmd"
  echo
  get-user-acceptance
  run-commands "${cmds[@]}"
}

collect-arg-and-validate "$@"
do-processing
clear-and-exit 0
