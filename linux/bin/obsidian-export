#!/bin/bash

set -e
shopt -s nullglob

print-help () {
cat <<- EOF
â”Œâ”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”„â”„â”„â”„â”„â”„â”„â”„â”„
â”‚-hâ”‚ --help                â”‚ Show this help message
â”‚-vâ”‚ --vault               â”‚ Traget another vault by its path, default is current dir
â”‚-oâ”‚ --out-dir             â”‚ Where to place the exported files
â”‚-tâ”‚ --tags                â”‚ Filter files with comma separated tags
â”‚  â”‚ --md                  â”‚ Export markdown not pdf
â”‚  â”‚ --cat                 â”‚ Concatenate all files into one
â”‚  â”‚ --fnah                â”‚ Use file name as the header of level 1 for its content
â”‚  â”‚ --file-name-as-header â”‚ Use file name as the header of level 1 for its content
â””â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”„â”„â”„â”„â”„â”„â”„â”„â”„
 
USAGE:
  export-obsidian [options...]

EXAMPLES:
  export-obsidian -v ./vault -o ~/Desktop/ -t tag1,tag2 --md
EOF
}


echo-title() {
  echo ---------------- "$@" -----------------
}


join-arr-by() {
  local d=$1 f=$2
  if shift 2; then
    printf %s "$f" "${@/#/$d}"
  fi
}


get-file-containing-tags() {
  # use `files` from argv or all the vault files
  if (( ${#files[@]} )); then
    vault_md_files=("${files[@]}")
  else
    readarray -t vault_md_files < <(ls "$vault"/*.md)
  fi

  files=()
  # prepend "#" to all tags and join them by "\|"
  grep_pattern="$(join-arr-by '\|' "${tags[@]/#/#}")"

  for file in "${vault_md_files[@]}"; do
    if grep "$grep_pattern" "$file" &> /dev/null; then
      files+=("$file")
    fi
  done
}

confirm() {
  local ans
  echo-title 'exporting these files?'
  printf "%s\n" "${files[@]}"
  read -rp "continue ? (y/[n]): " ans

  ans="$(echo "$ans" | tr '[:upper:]' '[:lower:]')"
  if [ "$ans" != "y" ]; then
    exit 1
  fi
}

collect-args() {
  vault="." # default to current directory

  while (($#)); do
    arg="$1"; shift
    [ "$arg" = "--vault"   ] && vault="$1"   && shift && continue
    [ "$arg" = "-v"        ] && vault="$1"   && shift && continue
    [ "$arg" = "--out-dir" ] && out_dir="$1" && shift && continue
    [ "$arg" = "-o"        ] && out_dir="$1" && shift && continue
    [ "$arg" = "--tags"    ] && tags="$1"    && shift && continue
    [ "$arg" = "-t"        ] && tags="$1"    && shift && continue
    [ "$arg" = "--help"    ] && is_help=1    && break
    [ "$arg" = "-h"        ] && is_help=1    && break
    [ "$arg" = "--md"      ] && is_md_only=1 && continue
    [ "$arg" = "--md"      ] && is_md_only=1 && continue
    [ "$arg" = "--cat"     ] && is_concat=1  && continue
    [ "$arg" = "--fnah"    ] && is_file_name_as_header=1 && continue
    [ "$arg" = "--file-name-as-header" ] && is_file_name_as_header=1  && continue
    if [ ! -f "$arg" ]; then
      >&2 echo "sorry this file doesn't exists: $arg"
      exit 1
    fi
    files+=("$arg") # fallback, append to the files
  done

  if [ "$is_help" ]; then
    print-help
    exit
  fi

  [ -z "$out_dir" ] && echo ERROR: you should specify output directory && exit 1

  vault="$(realpath "$vault")"
  out_dir="$(realpath "$out_dir")"

  # read the Attachments dir from obsidian vault settings
  attachments="$(
    sed -e '/attachmentFolderPath/ !d' "$vault"/.obsidian/app.json |
      grep -oP '\s*"attachmentFolderPath": \K"(.*?)"'
  )"
  # remove quotations ""
  attachments="$vault/${attachments:1:-1}"

  # convert comma delimited values into array
  IFS=',' read -ra tags <<< "$tags"
  [ "${#tags[@]}" -gt 0 ] && get-file-containing-tags

  [ ${#files[@]} = 0 ] && echo ERROR: no file to export && exit 1
  [ ! -d "$out_dir" ] && echo ERROR: you should specify the output directory && exit 1

  confirm
}


prepare-file() {
  # TODO: use the caption after "|" symbol
  local output
  output="$(cat)"

  # copying assets
  while read -r file; do
    cp "$attachments/$file" "$TMP_DIR/assets/"
  done < <(echo "$output" | sed -nr "/^\!\[\[(.*)\]\]/ p" | sed -E "s:^\!\[\[([^\|]*)(\|.*)?\]\]:\1:")

  # replace `![[image-name.png]]` to `![](./assets/image-name.png)`
  output="$(echo "$output" | sed -r "s:^\!\[\[([^\|]*)(\|(.*))?\]\]:![\3](./assets/\1):")"

  # increase the level due to adding the file name as a `# header`
  [ "$is_file_name_as_header" ] &&
    output="$(echo "$output" | sed -r 's/^#+ .*/#\0/')"
  echo "$output"
}


convert-to-pure-markdown() {
  for file in "${files[@]}"; do
    file_base="$(basename "$file")"
    [ $is_concat ] &&
      prepared_md_file="$TMP_DIR/concated_file.pure.md" ||
      prepared_md_file="$TMP_DIR/${file_base%.md}.pure.md"

    [ $is_file_name_as_header ] &&
      echo "# ${file_base%.md}" >> "$prepared_md_file"

    { echo
      prepare-file < "$file"
      echo
      echo
    } >> "$prepared_md_file"
  done
}


convert-to-pdf() {
  echo-title exporting to pdf
  for file in "$TMP_DIR"/*.md; do
    out_file="${file%.pure.md}.pdf"
    echo exporting ðŸ“¤: "$(basename "$out_file")"
    pandoc \
      --citeproc --toc --number-sections --pdf-engine=xelatex \
      -f markdown "$file" -o "$out_file"
  done
}


move-to-out-dir() {
  echo mv "$TMP_DIR"/*.md "$out_dir"
  if [ "$is_md_only" ]; then
    mv "$TMP_DIR/assets/" "$out_dir"
    mv "$TMP_DIR"/*.md "$out_dir"
  else
    mv "$TMP_DIR"/*.pdf "$out_dir"
  fi
}


TMP_DIR="/tmp/obsidian-export"
mkdir -p "$TMP_DIR"
rm -rf "$TMP_DIR"/*
mkdir "$TMP_DIR/assets"
collect-args "$@"
convert-to-pure-markdown
[ ! "$is_md_only" ] &&
  convert-to-pdf
move-to-out-dir
echo DONE ðŸ“‘
