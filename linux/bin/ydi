#!/bin/bash
# source: https://www.reddit.com/r/commandline/comments/hb50u0/is_there_a_youtubedl_interactive_script/
# this is a modified version of the above code, but I started from their

set -e

bin=$(basename "$0")

print-help () {
cat <<- EOF
OPTIONS:
┌──┬────────────┬───────────────────────────────────────────────────┄┄┄┄┄┄┄┄┄
│-h│ --help     │ Show this help message
│-p│ --print    │ Just print the choosen quality settings
└──┴────────────┴───────────────────────────────────────────────────┄┄┄┄┄┄┄┄┄
 
USAGE:
  $bin [OPTIONS] <URL> -- [ytdl OPTIONS]

EXAMPLES:
  # get the quality settings using and print to STDOUT
  $bin -p https://youtu.be/JK_J97ueOno

  # download the video to ./video.mp4 file
  $bin https://youtu.be/JK_J97ueOno -- -o ./video.mp4
EOF
}

collect-arg-and-validate() {
  local arg
  while (($#)); do
    arg="$1"; shift
    [ "$arg" = "--help"    ] && is_help=1           && break
    [ "$arg" = "-h"        ] && is_help=1           && break
    [ "$arg" = "--print"   ] && is_print=1          && continue
    [ "$arg" = "-p"        ] && is_print=1          && continue
    [ "$arg" = "--"        ] && ytdl_options=("$@") && break

    [ "$url" ] && >&2 echo error: can\'t receive more than URL && exit 2
    url="$arg"
  done

  # ----- help -----

  if [ "$is_help" ]; then
    print-help 
    exit 0
  fi

  # ----- validate -----
  [ -z "$url" ] && >&2 echo error: no URL provided && exit 2
  if ! echo "$url" | grep -qE '^https?://'; then
    >&2 echo error: URL is not valid && exit 2
  fi
}

collect-arg-and-validate "$@"

array=()

while read -r line; do
  array+=("$(echo "$line" | awk '{print $1}')" "$line")
done <<< "$(youtube-dl "${ytdl_options[@]}" -F --no-playlist "$url" | sed '0,/--------/d')"

# printf "%s\n" "${array[@]}"
# exit 0

answer=$(
  whiptail --notags --title "Youtube-DL" --menu 'Select which one' 20 120 10 "${array[@]}" 3>&1 1>&2 2>&3
)

quality_settings=$(echo "$answer" | awk '{print $1}')
audio=(249 250 140 251)

[ -z "$answer" ] && exit 1
if [[ ! ${audio[*]} =~ $quality_settings ]]; then
  # not audio choose "bestaudio"
  quality_settings="$quality_settings"+bestaudio
fi

if [ $is_print ]; then
  echo "$quality_settings"
  exit 0
fi

# use ytdl_options at the end to allow overriding default options 
youtube-dl -f "$quality_settings" --no-playlist -ciw -o "%(title)s.%(ext)s" "${ytdl_options[@]}" "$url"
